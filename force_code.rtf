{\rtf1\ansi\ansicpg1252\cocoartf2513
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 /* FSR simple testing sketch. \
 \
Connect one end of FSR to power, the other end to Analog 0.\
Then connect one end of a 10K resistor from Analog 0 to ground \
 \
For more information see www.ladyada.net/learn/sensors/fsr.html */\
 \
#include <Adafruit_NeoPixel.h>\
#ifdef __AVR__\
 #include <avr/power.h> // Required for 16 MHz Adafruit Trinket\
#endif\
\
// Which pin on the Arduino is connected to the NeoPixels?\
// On a Trinket or Gemma we suggest changing this to 1:\
#define LED_PIN     6\
\
// How many NeoPixels are attached to the Arduino?\
#define LED_COUNT  8\
\
// NeoPixel brightness, 0 (min) to 255 (max)\
#define BRIGHTNESS 50\
\
// Declare our NeoPixel strip object:\
Adafruit_NeoPixel strip = Adafruit_NeoPixel(LED_COUNT, LED_PIN, NEO_GRB + NEO_KHZ800);\
/*********************************************************************************************************/\
//GLOBAL STUFF\
//PIN TO READ FROM ANALOG\
int fsrPin = A1;     // the FSR and 10K pulldown are connected to a1\
int fsrReading;     // the analog reading from the FSR resistor divider\
\
\
// Argument 1 = Number of pixels in NeoPixel strip\
// Argument 2 = Arduino pin number (most are valid)\
// Argument 3 = Pixel type flags, add together as needed:\
//   NEO_KHZ800  800 KHz bitstream (most NeoPixel products w/WS2812 LEDs)\
//   NEO_KHZ400  400 KHz (classic 'v1' (not v2) FLORA pixels, WS2811 drivers)\
//   NEO_GRB     Pixels are wired for GRB bitstream (most NeoPixel products)\
//   NEO_RGB     Pixels are wired for RGB bitstream (v1 FLORA pixels, not v2)\
//   NEO_RGBW    Pixels are wired for RGBW bitstream (NeoPixel RGBW products)\
/*********************************************************************************************************/       \
\
\
void setup() \{\
  Serial.begin(9600);\
  // These lines are specifically to support the Adafruit Trinket 5V 16 MHz.\
  // Any other board, you can remove this part (but no harm leaving it):\
#if defined(__AVR_ATtiny85__)&&(F_CPU == 16000000)\
  clock_prescale_set(clock_div_1);\
#endif\
  // END of Trinket-specific code.\
\
strip.begin();           // INITIALIZE NeoPixel strip object (REQUIRED)\
 strip.show();            // Turn OFF all pixels ASAP\
 strip.setBrightness(50); // Set BRIGHTNESS to about 1/5 (max = 255)\
\}\
\
\
/*********************************************************************************************************/\
void whiteOverRainbow(int whiteSpeed, int whiteLength) \{\
      \
        if(whiteLength >= strip.numPixels()) whiteLength = strip.numPixels() - 1;\
      \
        int      head          = whiteLength - 1;\
        int      tail          = 0;\
        int      loops         = 3;\
        int      loopNum       = 0;\
        uint32_t lastTime      = millis();\
        uint32_t firstPixelHue = 0;\
      \
        for(;;) \{ // Repeat forever (or until a 'break' or 'return')\
          for(int i=0; i<strip.numPixels(); i++) \{  // For each pixel in strip...\
            if(((i >= tail) && (i <= head)) ||      //  If between head & tail...\
               ((tail > head) && ((i >= tail) || (i <= head)))) \{\
              strip.setPixelColor(i, strip.Color(0, 0, 0, 255)); // Set white\
            \} else \{                                             // else set rainbow\
              int pixelHue = firstPixelHue + (i * 65536L / strip.numPixels());\
              strip.setPixelColor(i, strip.gamma32(strip.ColorHSV(pixelHue)));\
            \}\
          \}\
      \
          strip.show(); // Update strip with new contents\
          // There's no delay here, it just runs full-tilt until the timer and\
          // counter combination below runs out.\
      \
          firstPixelHue += 40; // Advance just a little along the color wheel\
      \
          if((millis() - lastTime) > whiteSpeed) \{ // Time to update head/tail?\
            if(++head >= strip.numPixels()) \{      // Advance head, wrap around\
              head = 0;\
              if(++loopNum >= loops) return;\
            \}\
            if(++tail >= strip.numPixels()) \{      // Advance tail, wrap around\
              tail = 0;\
            \}\
            lastTime = millis();                   // Save time of last movement\
          \}\
        \}\
      \}\
        \
/*********************************************************************************************************/       \
\
void rainbowFade2White(int wait, int rainbowLoops, int whiteLoops) \{\
  int fadeVal=0, fadeMax=100;\
\
  // Hue of first pixel runs 'rainbowLoops' complete loops through the color\
  // wheel. Color wheel has a range of 65536 but it's OK if we roll over, so\
  // just count from 0 to rainbowLoops*65536, using steps of 256 so we\
  // advance around the wheel at a decent clip.\
  for(uint32_t firstPixelHue = 0; firstPixelHue < rainbowLoops*65536;\
    firstPixelHue += 256) \{\
\
    for(int i=0; i<strip.numPixels(); i++) \{ // For each pixel in strip...\
\
      // Offset pixel hue by an amount to make one full revolution of the\
      // color wheel (range of 65536) along the length of the strip\
      // (strip.numPixels() steps):\
      uint32_t pixelHue = firstPixelHue + (i * 65536L / strip.numPixels());\
\
      // strip.ColorHSV() can take 1 or 3 arguments: a hue (0 to 65535) or\
      // optionally add saturation and value (brightness) (each 0 to 255).\
      // Here we're using just the three-argument variant, though the\
      // second value (saturation) is a constant 255.\
      strip.setPixelColor(i, strip.gamma32(strip.ColorHSV(pixelHue, 255,\
        255 * fadeVal / fadeMax)));\
    \}\
\
    strip.show();\
    delay(wait);\
\
    if(firstPixelHue < 65536) \{                              // First loop,\
      if(fadeVal < fadeMax) fadeVal++;                       // fade in\
    \} else if(firstPixelHue >= ((rainbowLoops-1) * 65536)) \{ // Last loop,\
      if(fadeVal > 0) fadeVal--;                             // fade out\
    \} else \{\
      fadeVal = fadeMax; // Interim loop, make sure fade is at max\
    \}\
  \}\
\
  for(int k=0; k<whiteLoops; k++) \{\
    for(int j=0; j<256; j++) \{ // Ramp up 0 to 255\
      // Fill entire strip with white at gamma-corrected brightness level 'j':\
      strip.fill(strip.Color(0, 0, 0, strip.gamma8(j)));\
      strip.show();\
    \}\
    delay(1000); // Pause 1 second\
    for(int j=255; j>=0; j--) \{ // Ramp down 255 to 0\
      strip.fill(strip.Color(0, 0, 0, strip.gamma8(j)));\
      strip.show();\
    \}\
  \}\
\
  delay(10); // Pause 1/2 second\
\}  \
\
/*********************************************************************************************************/       \
   \
void loop(void) \{\
  fsrReading = analogRead(fsrPin);  \
 \
  Serial.print("Analog reading = ");\
  Serial.print(fsrReading);     // the raw analog reading\
 \
  // We'll have a few threshholds, qualitatively determined\
  if (fsrReading <= 1015 ) \{\
    Serial.println(" - Touch");\
      whiteOverRainbow(75, 3);\
      rainbowFade2White(3, 3, 1);\
     /* \
      for (int i =0; i < LED_COUNT ; i++)\{\
      strip.setPixelColor(i, strip.Color( 255,   0,   255)); //deep pink\
      strip.show();\
      \}\
      */\
   delay(10);\
  \} \
  else \{\
    Serial.println(" -  No Pressure");\
    for (int i =0; i < LED_COUNT ; i++)\{\
      strip.setPixelColor(i, strip.Color( 255,20,147)); \
      strip.show();\
     \}\
     delay(500);\
  \}\
  \
\} }